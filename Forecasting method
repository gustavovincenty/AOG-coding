def classify_numbers(numbers, dataset_min, dataset_max):
    dataset_range = dataset_max - dataset_min
    classes = []
    for number in numbers:
        class_value = ""
        if number >= dataset_min + (dataset_range / 2):
            class_value += "1"
        else:
            class_value += "0"

        if number >= dataset_min + (int(class_value[0]) * (dataset_range / 2)) + (dataset_range / 4):
            class_value += "1"
        else:
            class_value += "0"

        if number >= dataset_min + (int(class_value[0])*(dataset_range / 2)) + (int(class_value[1])*(dataset_range / 4)) + (dataset_range / 8):
            class_value += "1"
        else:
            class_value += "0"

        classes.append(class_value)

    return classes


# Example usage:
numbers = [78.1, 78.6, 79.2, 80.3, 82.1, 82, 83.4, 84.2, 85, 84.2, 82.2, 79.8, 77.7, 76.9, 77.9, 79, 81.5, 83.3, 82.4, 84.1]
dataset_min = 70  # Replace with desired minimum value
dataset_max = 90  # Replace with desired maximum value
classifications = classify_numbers(numbers, dataset_min, dataset_max)

# Building the matrix
matrix1 = []
for i in range(len(numbers)):
    row = []
    for j in range(10):  # 10 columns
        if j == 0:  # Last column
            row.append(classifications[i])
        elif j <= i:  # Fill with classes from i to end
            row.append(classifications[i - j])
        else:
            row.append(None)  # Fill empty cells with None
    matrix1.append(row)

matrix2 = []
for i in range(len(matrix1)):
    row = []
    for j in range(len(matrix1[0])-1):
        if j <= i:
            element = matrix1[i][0]
            next_element = matrix1[i][j+1]
            if next_element is None:
                append_number = "000"
            else:
                append_number = next_element
            number = f"{append_number}{element}"
            row.append(number)
        else:
            row.append(None)
    matrix2.append(row)

# Print the matrix with columns from right to left
for row in matrix1:
    for i in range(len(row)-1,-1,-1):
        print(row[i], end='\t')
    print('\n')

for row in matrix2:
    for i in range(len(row)-1,-1,-1):
        print(row[i], end='\t')
    print('\n')

cases = ['111', '110', '101', '100', '011', '010', '001', '000']
header = ['lag', ''] + cases + ['SUMS']
matrix3 = [header]
for i in range(len(matrix2[0])):
    for case1 in cases:
        new_row = [i+1, case1] + len(cases) * [0]
        for k, case2 in enumerate(cases):
            for j in range(i, len(matrix2)):
                if case1 + case2 == matrix2[j][i]:
                    new_row[2+k] += 1
        total = sum(new_row[3:])
        new_row.append(total)
        matrix3.append(new_row)

for row in matrix3:
    for i in range(len(row)):
        print(row[i], end='\t')
    print('\n')

header = ['lag', ''] + cases
matrix4 = [header]
for i, row in enumerate(matrix3):
    if i > 0:
        total = sum(row[3:-1])
        new_row = row[0:2] + len(cases) * [0]
        for j in range(3, len(row)-1):
            if total != 0:
                new_row[j-1] = round(row[j]/total, 2)
            else:
                new_row[j - 1] = 0
        matrix4.append(new_row)

for row in matrix4:
    for i in range(len(row)):
        print(row[i], end='\t')
    print('\n')
